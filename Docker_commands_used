# Docker Commands Cheat Sheet

This README contains basic Docker commands I used while learning Docker on Linux.

---

## Installation

Install Docker on Ubuntu:

```
sudo apt-get update
sudo apt-get install docker.io
```

Check Docker service status:

```
sudo systemctl status docker
```

Add your user to the docker group to run docker without sudo:

```
sudo usermod -aG docker $USER
newgrp docker
```

---

## Working with Containers

List running containers:

```
docker ps
```

List all containers (including stopped ones):

```
docker ps -a
```

Run the official hello-world image:

```
docker run hello-world
```

Build a Docker image from the Dockerfile in the current directory:

```
docker build -t firstimage .
```

Run a container from your custom image:

```
docker run firstimage
```

Run a container in detached mode and map ports:

```
docker run -d -p 80:80 firstimage
```

View logs of a container:

```
docker logs <container_id>
```

Attach to a running container:

```
docker attach <container_id>
```

Stop a running container:

```
docker stop <container_id>
```

---

## Working with Networks

List all Docker networks:

```
docker network ls
```

Create a custom network (e.g. bridge network):

```
docker network create mynet -d bridge
```

Inspect a Docker network:

```
docker network inspect mynet
```

Run a MySQL container attached to a custom network with environment variables:

```
docker run -d --network mynet -e MYSQL_ROOT_PASSWORD=root mysql
```

- `--network mynet` attaches the container to the custom network.
- `-e MYSQL_ROOT_PASSWORD=root` sets the root password for MySQL.
- To use more than one environment variable, add multiple `-e` flags:
  
  ```
  docker run -d --network mynet -e MYSQL_ROOT_PASSWORD=root -e MYSQL_DATABASE=mydb mysql
  ```

Run a Flask app container attached to the same custom network:

```
docker run --network mynet -p 5000:5000 flask-app
```

- Maps port 5000 on the host to port 5000 in the container.
- Connects to the same custom network as MySQL for container-to-container communication.

---

## Working with Volumes

List Docker volumes:

```
docker volume ls
```

Create a volume:

```
docker volume create my_volume
```

Inspect a volume:

```
docker volume inspect my_volume
```

Run a MySQL container and bind it to a volume:

```
docker run -d --network mynet -e MYSQL_ROOT_PASSWORD=root -v my_volume:/var/lib/mysql mysql
```

- The `-v` flag maps `my_volume` on the host to `/var/lib/mysql` inside the container.
- This persists MySQL data even if the container stops or is removed.

---

## Docker Compose

Start services defined in a `docker-compose.yml` file:

```
docker compose up
```

- This builds and runs all containers defined in your Compose file.
- Add `-d` to run in detached mode:

  ```
  docker compose up -d
  ```

---

## System Cleanup and Image Management

Remove unused data (containers, networks, images, cache):

```
docker system prune
```

Remove one or more Docker images by ID:

```
docker rmi image_id1 image_id2
```

List only image IDs:

```
docker images -q
```

Remove all images forcefully:

```
docker rmi -f $(docker images -q)
```

⚠️ Be cautious: the last command deletes **all images** on your system!

---

## Notes

- Replace `<container_id>` with the actual ID or name of your container.
- Use `docker --help` to see more options and commands.
